#!/usr/local/bin/ansible-playbook

---
- hosts: 127.0.0.1
  connection: local
  vars:
    toolchain_version: "4"
    src_dir: "{{ playbook_dir }}/src"
    work_dir: "{{ playbook_dir }}/temp"
    unpack_dir: "{{ work_dir }}/unpack"
    out_dir: "{{ playbook_dir }}/build"
    src_link: "https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-src.tar.bz2"
    gettext_link: "https://ftp.gnu.org/pub/gnu/gettext/gettext-0.21.tar.gz"
    readline_link: "ftp://ftp.gnu.org/gnu/readline/readline-8.1.tar.gz"
    openssl_link: "https://www.openssl.org/source/openssl-3.0.4.tar.gz"
    python_link: "https://www.python.org/ftp/python/3.9.9/Python-3.9.9.tgz"
    protobuf_link: "https://github.com/protocolbuffers/protobuf/releases/download/v3.20.1/protobuf-cpp-3.20.1.tar.gz"
    src_filename: "{{ src_link | basename }}"
    src_dirname: "{{ src_filename.split('-src') | first }}"
    gettext_filename: "{{ gettext_link | basename }}"
    gettext_dirname: "{{ gettext_filename.split('.tar.gz') | first }}"
    gettext_configure_args: ""
    readline_filename: "{{ readline_link | basename }}"
    readline_dirname: "{{ readline_filename.split('.tar.gz') | first }}"
    readline_configure_args: ""
    openssl_filename: "{{ openssl_link | basename }}"
    openssl_dirname: "{{ openssl_filename.split('.tar.gz') | first }}"
    openssl_configure_args: ""
    python_filename: "{{ python_link | basename }}"
    python_dirname: "{{ python_filename.split('.tgz') | first }}"
    python_configure_args: "--enable-shared --with-openssl={{ work_dir }}/openssl"
    curses_configure_args: "--with-shared --enable-widec --with-versioned-syms"
    protobuf_filename: "{{ protobuf_link | basename }}"
    protobuf_version: "{{ protobuf_filename.split('-cpp-')[1].split('.tar.gz') | first }}"
    protobuf_dirname: "protobuf-{{ protobuf_version }}"
    protobuf_configure_args: ""
    openocd_darwin_filename: "xpack-openocd-0.11.0-3-darwin-x64.tar.gz"
    openocd_darwin_dirname: "{{ openocd_darwin_filename.split('-darwin-x64.tar.gz') | first }}"
    tools_to_add:
      - "gettext"
      - "readline"
      - "openssl"
      - "python"
      - "protobuf"
    wrappers:
      - "bin/arm-none-eabi-gdb-py"
      - "protobuf/bin/protoc"
      - "python/bin/python3.9"

  tasks:
    - name: Install build dependences
      package:
        name:
          - gnu-tar
          - libtool
          - libunistring
          - libgc
          - libffi
          - gmp
          - pkg-config
        state: latest

    - name: Clean old builds
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ work_dir }}"
        - "{{ out_dir }}"

    - name: Create work dirs
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ work_dir }}"
        - "{{ unpack_dir }}"
        - "{{ out_dir }}"

    - name: Download tools sources
      get_url:
        url: "{{ lookup('vars', item ~ '_link') }}"
        dest: "{{ work_dir }}/{{ lookup('vars', item ~ '_filename') }}"
      with_items: "{{ tools_to_add }}"

    - name: Unpack tools sources
      unarchive:
        src: "{{ work_dir }}/{{ lookup('vars', item ~ '_filename') }}"
        dest: "{{ unpack_dir }}"
      with_items: "{{ tools_to_add }}"

    - name: Build tools (x86_64-darwin)
      shell: |
        export SYSTEM_VERSION_COMPAT=1
        export DYLD_LIBRARY_PATH="{{ work_dir }}/gettext/lib:$DYLD_LIBRARY_PATH"
        export DYLD_LIBRARY_PATH="{{ work_dir }}/readline/lib:$DYLD_LIBRARY_PATH"
        export DYLD_LIBRARY_PATH="{{ work_dir }}/openssl/lib:$DYLD_LIBRARY_PATH"
        if [ "{{ item }}" = "python" ]; then
          export PKG_CONFIG_PATH="{{ work_dir }}/openssl/lib/pkgconfig"
          export CPPFLAGS="-I{{ work_dir }}/readline/include"
          export LDFLAGS="-L{{ work_dir }}/readline/lib"
        fi
        ./configure "--prefix={{ work_dir }}/{{ item }}" {{ lookup('vars', item ~ '_configure_args') }}
        make "-j{{ ansible_processor_vcpus }}"
        if [ "{{ item }}" = "openssl" ]; then # exclude openssl man pages
          make install_sw
        else
          make install
        fi
      args:
        chdir: "{{ unpack_dir }}/{{ lookup('vars', item ~ '_dirname') }}"
      with_items: "{{ tools_to_add }}"

    - name: Unpack pre-compiled openocd (x86_64-darwin)
      unarchive:
        src: "{{ src_dir }}/darwin/{{ openocd_darwin_filename }}"
        dest: "{{ work_dir }}/"

    - name: Install python libs (x86_64-darwin)
      shell:
        cmd: "{{ work_dir }}/python/bin/python3 -m pip install protobuf=={{ protobuf_version }} pyserial==3.5 heatshrink2==0.11.0 Pillow==9.1.1 python3-protobuf==2.5.0 click==8.1.3 platformdirs==2.5.2 tomli==2.0.1 pathspec==0.9.0 typing-extensions==4.3.0 mypy_extensions==0.4.3"

    - name: Download toolchain sources
      get_url:
        url: "{{ src_link }}"
        dest: "{{ work_dir }}/{{ src_filename }}"

    # we use shell command cause Ansible's unarchive module don't support *.bz2 format
    - name: Unpack toolchain sources
      shell:
        cmd: "tar -xjf {{ work_dir }}/{{ src_filename }} -C {{ work_dir }}"
        warn: false

    - name: Patch python-config.sh (x86_64-darwin)
      copy:
        src: "{{ src_dir }}/darwin/python-config.sh"
        dest: "{{ work_dir }}/{{ src_dirname }}/python-config.sh"

    - name: Patch build-toolchain.sh (x86_64-darwin)
      replace:
        path: "{{ work_dir }}/{{ src_dirname }}/build-toolchain.sh"
        regexp: "--with-python=yes"
        replace: "--with-python={{ work_dir }}/{{ src_dirname }}/python-config.sh"

    # to compile gdb with custom Python, it need to be in PATH for compilation time
    - name: Build toolchain
      shell: |
        export PATH="{{ work_dir }}/python/bin:$PATH"
        export SYSTEM_VERSION_COMPAT=1
        ./install-sources.sh
        ./build-prerequisites.sh
        ./build-toolchain.sh --skip_steps=howto,manual
      args:
        chdir: "{{ work_dir }}/{{ src_dirname }}"

    - name: Find builded toolchain to patch (x86_64-darwin)
      find:
        paths: "{{ work_dir }}/{{ src_dirname }}/pkg"
        use_regex: true
        patterns: '.+-mac-.+\.tar\.bz2$'
        file_type: "file"
      register: x86_64_darwin_toolchain_tar

    - set_fact:
        x86_64_darwin_toolchain_tar: "{{ x86_64_darwin_toolchain_tar.files[0].path}}"

    - name: Unpack builded toolchain (x86_64-darwin)
      shell:
        cmd: "tar -xjf {{ x86_64_darwin_toolchain_tar }} -C {{ unpack_dir }}"
        warn: false

    # we can use variable output only on next task..
    - set_fact:
        x86_64_darwin_toolchain_dir: "{{ x86_64_darwin_toolchain_tar | basename }}"

    - set_fact:
        x86_64_darwin_toolchain_dir: "{{ unpack_dir }}/{{ x86_64_darwin_toolchain_dir.split('-mac-') | first }}"

    # cmd is more faster than Ansible copy module
    - name: Add our packages and libs to toolchain (x86_64-darwin)
      shell:
        cmd: "mv {{ work_dir }}/{{ item }} {{ x86_64_darwin_toolchain_dir }}/"
      with_items: "{{ tools_to_add }}"
      when: item != "readline"

    - name: Add openocd to toolchain (x86_64-darwin)
      shell:
        cmd: "mv {{ work_dir }}/{{ openocd_darwin_dirname }} {{ x86_64_darwin_toolchain_dir }}/openocd"

    - name: Backup original binnaries (x86_64-darwin)
      copy:
        src: "{{ x86_64_darwin_toolchain_dir }}/{{ item }}"
        dest: "{{ x86_64_darwin_toolchain_dir }}/{{ item }}-bin"
        mode: 0755
      with_items: "{{ wrappers }}"

    - name: Add wrappers (x86_64-darwin)
      copy:
        src: "{{ src_dir }}/darwin/wrappers/{{ item | basename }}-wrapper"
        dest: "{{ x86_64_darwin_toolchain_dir }}/{{ item }}"
        mode: 0755
      with_items: "{{ wrappers }}"

    - name: Fix interpreter in python/bin scripts (x86_64-darwin)
      replace:
        path: "{{ x86_64_darwin_toolchain_dir }}/python/bin/{{ item }}"
        regexp: "#!{{ work_dir }}/python/bin/python3.9"
        replace: "#!/usr/bin/env python3"
      loop:
        - idle3.9
        - 2to3-3.9
        - pip3
        - pip3.9
        - pydoc3.9

    - name: Add toolchain version (x86_64-darwin)
      copy:
        content: "{{ toolchain_version }}"
        dest: "{{ x86_64_darwin_toolchain_dir }}/VERSION"

    - name: Rename toolchain directory (x86_64-darwin)
      shell:
        cmd: "mv {{ x86_64_darwin_toolchain_dir }} {{ unpack_dir }}/gcc-arm-none-eabi-10.3-x86_64-darwin-flipper"

    - name: Pack patched toolchain (x86_64-darwin)
      archive:
        path: "{{ unpack_dir }}/gcc-arm-none-eabi-10.3-x86_64-darwin-flipper"
        dest: "{{ out_dir }}/gcc-arm-none-eabi-10.3-x86_64-darwin-flipper-{{ toolchain_version }}.tar.gz"

    - name: Upload toolchain to server
      shell:
        cmd: "rsync -Pav -e \"ssh -p 41337 -i {{ ansible_env.HOME }}/.ssh/server.flipperdevices.com.sec\" {{ out_dir }}/ data@server.flipperdevices.com:/home/data/toolchain/"
