#!/usr/bin/ansible-playbook

---
- hosts: 127.0.0.1
  connection: local
  vars:
    toolchain_version: "6"
    src_dir: "{{ playbook_dir }}/src"
    work_dir: "{{ playbook_dir }}/temp"
    unpack_dir: "{{ work_dir }}/unpack"
    out_dir: "{{ playbook_dir }}/build"
    src_link: "https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-src.tar.bz2"
    libffi_link: "https://github.com/libffi/libffi/archive/refs/tags/v3.3.tar.gz"
    python_link: "https://www.python.org/ftp/python/3.9.9/Python-3.9.9.tgz"
    ncurses_link: "https://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.2.tar.gz"
    protobuf_link: "https://github.com/protocolbuffers/protobuf/releases/download/v3.20.1/protobuf-cpp-3.20.1.tar.gz"
    libtool_link: "https://ftpmirror.gnu.org/libtool/libtool-2.4.6.tar.gz"
    libedit_link: "https://www.thrysoee.dk/editline/libedit-20210910-3.1.tar.gz"
    src_filename: "{{ src_link | basename }}"
    src_dirname: "{{ src_filename.split('-src') | first }}"
    libedit_filename: "{{ libedit_link | basename }}"
    libedit_dirname: "{{ edit_filename.split('.tar.gz') | first }}"
    lidedit_configure_args: ""
    libffi_filename: "libffi-3.3.tar.gz"
    libffi_dirname: "{{ libffi_filename.split('.tar.gz') | first }}"
    libffi_configure_args: "--disable-docs"
    python_filename: "{{ python_link | basename }}"
    python_dirname: "{{ python_filename.split('.tgz') | first }}"
    python_configure_args: "--enable-shared"
    ncurses_filename: "{{ ncurses_link | basename }}"
    ncurses_dirname: "{{ ncurses_filename.split('.tar.gz') | first }}"
    ncurses_configure_args: "--with-shared --enable-widec --with-versioned-syms"
    protobuf_filename: "{{ protobuf_link | basename }}"
    protobuf_version: "{{ protobuf_filename.split('-cpp-')[1].split('.tar.gz') | first }}"
    protobuf_dirname: "protobuf-{{ protobuf_version }}"
    protobuf_configure_args: ""
    libtool_filename: "{{ libtool_link | basename }}"
    libtool_dirname: "{{ libtool_filename.split('.tar.gz') | first }}"
    libtool_configure_args: ""
    openocd_linux_filename: "xpack-openocd-0.11.0-3-linux-x64.tar.gz"
    openocd_linux_dirname: "{{ openocd_linux_filename.split('-linux-x64.tar.gz') | first }}"
    openocd_win32_filename: "xpack-openocd-0.11.0-3-win32-ia32.zip"
    openocd_win32_dirname: "{{ openocd_win32_filename.split('-win32-ia32.zip') | first }}"
    tools_to_add:
      - "libffi"
      - "ncurses"
      - "libtool"
      - "python"
      - "protobuf"
    wrappers:
      - "bin/arm-none-eabi-gdb-py"
      - "bin/arm-none-eabi-gdb"
      - "protobuf/bin/protoc"
      - "python/bin/python3.9"

  tasks:
    - name: Install build dependences
      become: true
      package:
        name:
          - build-essential
          - autoconf
          - autogen
          - bison
          - dejagnu
          - flex
          - flip
          - gawk
          - git
          - gperf
          - gzip
          - nsis
          - openssh-client
          - p7zip-full
          - perl
          - python-dev
          - libisl-dev
          - scons
          - tcl
          - texinfo
          - tofrodos
          - wget
          - zip
          - texlive
          - texlive-extra-utils
          - libncurses5-dev
          - libncursesw6
          - libncurses-dev
          - libtool
          - gcc-mingw-w64-i686
          - g++-mingw-w64-i686
          - binutils-mingw-w64-i686
        state: latest

    - name: Clean old builds
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ work_dir }}"
        - "{{ out_dir }}"

    - name: Create work dirs
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ work_dir }}"
        - "{{ unpack_dir }}"
        - "{{ out_dir }}"
        - "{{ work_dir }}/win32"
        - "{{ unpack_dir }}/win32"

    - name: Download tools sources
      get_url:
        url: "{{ lookup('vars', item ~ '_link') }}"
        dest: "{{ work_dir }}/{{ lookup('vars', item ~ '_filename') }}"
      with_items: "{{ tools_to_add }}"

    - name: Unpack tools sources
      unarchive:
        src: "{{ work_dir }}/{{ lookup('vars', item ~ '_filename') }}"
        dest: "{{ unpack_dir }}"
      with_items: "{{ tools_to_add }}"

    - name: Build tools (x86_64-linux)
      shell: |
        export LD_LIBRARY_PATH="{{ work_dir }}/libffi/lib:$LD_LIBRARY_PATH"
        export LD_LIBRARY_PATH="{{ work_dir }}/ncurses/lib:$LD_LIBRARY_PATH"
        export LD_LIBRARY_PATH="{{ work_dir }}/libtool/lib:$LD_LIBRARY_PATH"
        if [ "{{ item }}" = "libffi" ]; then
          ./autogen.sh
        fi
        ./configure "--prefix={{ work_dir }}/{{ item }}" {{ lookup('vars', item ~ '_configure_args') }}
        make "-j{{ ansible_processor_vcpus }}"
        make install
      args:
        chdir: "{{ unpack_dir }}/{{ lookup('vars', item ~ '_dirname') }}"
      with_items: "{{ tools_to_add }}"

    - name: Unpack pre-compiled openocd (x86_64-linux)
      unarchive:
        src: "{{ src_dir }}/linux/{{ openocd_linux_filename }}"
        dest: "{{ work_dir }}/"

    - name: Unpack pre-compiled python (i686-windows)
      unarchive:
        src: "{{ src_dir }}/win32/python.tar.gz"  # TODO(drunkbatya): upload to server?
        dest: "{{ work_dir }}/win32/"

    - name: Unpack pre-downloaded python libs (i686-windows)
      unarchive:
        src: "{{ src_dir }}/win32/python-libs.tar.gz"  # TODO(drunkbatya): upload to server?
        dest: "{{ work_dir }}/win32/python"

    - name: Create protoc directory (i686-windows)
      file:
        path: "{{ work_dir }}/win32/protoc"
        state: directory

    - name: Unpack pre-compiled protoc (i686-windows)
      unarchive:
        src: "{{ src_dir }}/win32/protoc-21.1-win32.zip"
        dest: "{{ work_dir }}/win32/protoc"

    - name: Unpack pre-compiled openocd (i686-windows)
      unarchive:
        src: "{{ src_dir }}/win32/{{ openocd_win32_filename }}"
        dest: "{{ work_dir }}/win32/"

    - name: Install python libs (x86_64-linux)
      shell:
        cmd: "{{ work_dir }}/python/bin/python3 -m pip install protobuf=={{ protobuf_version }} pyserial==3.5 heatshrink2==0.11.0 Pillow==9.1.1 python3-protobuf==2.5.0 click==8.1.3 platformdirs==2.5.2 tomli==2.0.1 pathspec==0.9.0 typing-extensions==4.3.0 mypy_extensions==0.4.3"

    - name: Download toolchain sources
      get_url:
        url: "{{ src_link }}"
        dest: "{{ work_dir }}/{{ src_filename }}"

    # we use shell command cause Ansible's unarchive module don't support *.bz2 format
    - name: Unpack toolchain sources
      shell:
        cmd: "tar -xjf {{ work_dir }}/{{ src_filename }} -C {{ work_dir }}"
        warn: false

    - name: Patch python-config.sh (x86_64-linux)
      copy:
        src: "{{ src_dir }}/linux/python-config.sh"
        dest: "{{ work_dir }}/{{ src_dirname }}/python-config-linux.sh"
        mode: 0755

    - name: Patch python-config.sh (i686-windows)
      copy:
        src: "{{ src_dir }}/win32/python-config.sh"
        dest: "{{ work_dir }}/{{ src_dirname }}/python-config.sh"
        mode: 0755

    # We don't need to patch build-toolchain.sh for windows, cause it patched by default

    - name: Patch build-toolchain.sh (x86_64-linux)
      replace:
        path: "{{ work_dir }}/{{ src_dirname }}/build-toolchain.sh"
        regexp: "--with-python=yes"
        replace: "--with-python={{ work_dir }}/{{ src_dirname }}/python-config-linux.sh"

    - name: Add custom build-prerequisites.sh
      copy:
        src: "{{ src_dir }}/build-prerequisites.sh"
        dest: "{{ work_dir }}/{{ src_dirname }}/build-prerequisites.sh"

    # to compile gdb with custom Python, it need to be in PATH for compilation time
    - name: Build toolchain
      shell: |
        export LD_LIBRARY_PATH="{{ work_dir }}/libffi/lib:$LD_LIBRARY_PATH"
        export LD_LIBRARY_PATH="{{ work_dir }}/ncurses/lib:$LD_LIBRARY_PATH"
        export LD_LIBRARY_PATH="{{ work_dir }}/libtool/lib:$LD_LIBRARY_PATH"
        export PATH="{{ work_dir }}/python/bin:$PATH"
        ./install-sources.sh
        ./build-prerequisites.sh
        ./build-toolchain.sh
      args:
        chdir: "{{ work_dir }}/{{ src_dirname }}"

    - name: Find builded toolchain to patch (x86_64-linux)
      find:
        paths: "{{ work_dir }}/{{ src_dirname }}/pkg"
        use_regex: true
        patterns: '.+x86_64-linux\.tar\.bz2$'
        file_type: "file"
      register: x86_64_linux_toolchain_tar

    - name: Find builded toolchain to patch (i686-windows)
      find:
        paths: "{{ work_dir }}/{{ src_dirname }}/pkg"
        use_regex: true
        patterns: '.+win32\.zip$'
        file_type: "file"
      register: i686_windows_toolchain_zip

    - set_fact:
        x86_64_linux_toolchain_tar: "{{ x86_64_linux_toolchain_tar.files[0].path}}"
        i686_windows_toolchain_zip: "{{ i686_windows_toolchain_zip.files[0].path}}"

    - name: Unpack builded toolchain (x86_64-linux)
      shell:
        cmd: "tar -xjf {{ x86_64_linux_toolchain_tar }} -C {{ unpack_dir }}"
        warn: false

    - name: Unpack builded toolchain (i686-windows)
      unarchive:
        src: "{{ i686_windows_toolchain_zip }}"
        dest: "{{ unpack_dir }}/win32"

    # we can use variable output only on next task..
    - set_fact:
        x86_64_linux_toolchain_dir: "{{ x86_64_linux_toolchain_tar | basename }}"
        i686_windows_toolchain_dir: "{{ i686_windows_toolchain_zip | basename }}"

    - set_fact:
        x86_64_linux_toolchain_dir: "{{ unpack_dir }}/{{ x86_64_linux_toolchain_dir.split('-x86_64-linux') | first }}"
        i686_windows_toolchain_dir: "{{ unpack_dir }}/win32/{{ i686_windows_toolchain_dir.split('-win32') | first }}"

    # cmd is more faster than Ansible copy module
    - name: Add our packages and libs to toolchain (x86_64-linux)
      shell:
        cmd: "mv {{ work_dir }}/{{ item }} {{ x86_64_linux_toolchain_dir }}/"
      with_items: "{{ tools_to_add }}"

    - name: Add openocd to toolchain (x86_64-linux)
      shell:
        cmd: "mv {{ work_dir }}/{{ openocd_linux_dirname }} {{ x86_64_linux_toolchain_dir }}/openocd"

    - name: Add complete python to toolchain (i686-windows)
      shell:
        cmd: "mv {{ work_dir }}/win32/python {{ i686_windows_toolchain_dir }}/"

    - name: Add protoc to toolchain (i686-windows)
      shell:
        cmd: "mv {{ work_dir }}/win32/protoc {{ i686_windows_toolchain_dir }}/"

    - name: Add  openocd to toolchain (i686-windows)
      shell:
        cmd: "mv {{ work_dir }}/win32/{{ openocd_win32_dirname }} {{ i686_windows_toolchain_dir }}/openocd"

    - name: Backup original binnaries (x86_64-linux)
      copy:
        src: "{{ x86_64_linux_toolchain_dir }}/{{ item }}"
        dest: "{{ x86_64_linux_toolchain_dir }}/{{ item }}-bin"
        mode: 0755
      with_items: "{{ wrappers }}"

    - name: Backup original binnaries (i686-windows)
      shell:
        cmd: "mv arm-none-eabi-gdb-py.exe arm-none-eabi-gdb-py-bin.exe"
        creates: "{{ i686_windows_toolchain_dir }}/bin/arm-none-eabi-gdb-py-bin.exe"
      args:
        chdir: "{{ i686_windows_toolchain_dir }}/bin"

    - name: Add wrappers (x86_64-linux)
      copy:
        src: "{{ src_dir }}/linux/wrappers/{{ item | basename }}-wrapper"
        dest: "{{ x86_64_linux_toolchain_dir }}/{{ item }}"
        mode: 0755
      with_items: "{{ wrappers }}"

    - name: Fix interpreter in python/bin scripts (x86_64-linux)
      replace:
        path: "{{ x86_64_linux_toolchain_dir }}/python/bin/{{ item }}"
        regexp: "#!{{ work_dir }}/python/bin/python3.9"
        replace: "#!/usr/bin/env python3"
      loop:
        - idle3.9
        - 2to3-3.9
        - pip3
        - pip3.9
        - pydoc3.9

    - name: Add wrappers (i686-windows)
      copy:
        src: "{{ src_dir }}/win32/wrappers/arm-none-eabi-gdb-py-wrapper.bat"
        dest: "{{ i686_windows_toolchain_dir }}/bin/arm-none-eabi-gdb-py.bat"

    - name: Rename toolchain directory (x86_64-linux)
      shell:
        cmd: "mv {{ x86_64_linux_toolchain_dir }} {{ unpack_dir }}/gcc-arm-none-eabi-10.3-x86_64-linux-flipper"

    - name: Rename toolchain directory (i686-windows)
      shell:
        cmd: "mv {{ i686_windows_toolchain_dir }} {{ unpack_dir }}/win32/gcc-arm-none-eabi-10.3-i686-windows-flipper"

    - name: Add clang-format to toolchain (x86_64-linux)
      copy:
        src: "{{ src_dir }}/linux/bin/clang-format"
        dest: "{{ unpack_dir }}/gcc-arm-none-eabi-10.3-x86_64-linux-flipper/bin/clang-format"
        mode: 0755

    - name: Add clang-format to toolchain (i686-windows)
      copy:
        src: "{{ src_dir }}/win32/bin/clang-format.exe"
        dest: "{{ unpack_dir }}/win32/gcc-arm-none-eabi-10.3-i686-windows-flipper/bin/clang-format.exe"
        mode: 0755

    - name: Add toolchain version (x86_64-linux)
      copy:
        content: "{{ toolchain_version }}"
        dest: "{{ unpack_dir }}/gcc-arm-none-eabi-10.3-x86_64-linux-flipper/VERSION"

    - name: Add toolchain version (i686-windows)
      copy:
        content: "{{ toolchain_version }}"
        dest: "{{ unpack_dir }}/win32/gcc-arm-none-eabi-10.3-i686-windows-flipper/VERSION"

    - name: Pack patched toolchain (x86_64-linux)
      archive:
        path: "{{ unpack_dir }}/gcc-arm-none-eabi-10.3-x86_64-linux-flipper"
        dest: "{{ out_dir }}/gcc-arm-none-eabi-10.3-x86_64-linux-flipper-{{ toolchain_version }}.tar.gz"

    - name: Pack patched toolchain (i686-windows)
      archive:
        path: "{{ unpack_dir }}/win32/gcc-arm-none-eabi-10.3-i686-windows-flipper"
        dest: "{{ out_dir }}/gcc-arm-none-eabi-10.3-i686-windows-flipper-{{ toolchain_version }}.zip"
        format: zip

    - name: Upload toolchain to server
      shell:
        cmd: "rsync -Pav -e \"ssh -p 41337 -i {{ ansible_env.HOME }}/.ssh/server.flipperdevices.com.sec\" {{ out_dir }}/ data@server.flipperdevices.com:/home/data/toolchain/"
