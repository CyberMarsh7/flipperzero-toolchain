#!/usr/bin/ansible-playbook

---
- hosts: 127.0.0.1
  connection: local
  vars:
    src_link: "https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-src.tar.bz2"
    python_link: "https://www.python.org/ftp/python/3.9.13/Python-3.9.13.tgz"
    ncurses_link: "https://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.2.tar.gz"
    protobuf_link: "https://github.com/protocolbuffers/protobuf/releases/download/v3.20.1/protobuf-cpp-3.20.1.tar.gz"
    image-magick: "https://download.imagemagick.org/ImageMagick/download/ImageMagick.tar.gz"
    work_dir: "{{ playbook_dir }}/src"
    unpack_dir: "{{ work_dir }}/unpack"
    out_dir: "{{ playbook_dir }}/build"
    src_filename: "{{ src_link | basename }}"
    src_dirname: "{{ src_filename.split('-src') | first }}"
    python_filename: "{{ python_link | basename }}"
    python_dirname: "{{ python_filename.split('.tgz') | first }}"
    ncurses_filename: "{{ ncurses_link | basename }}"
    ncurses_dirname: "{{ ncurses_filename.split('.tar.gz') | first }}"
    protobuf_filename: "{{ protobuf_link | basename }}"
    protobuf_version: "{{ protobuf_filename.split('-cpp-')[1].split('.tar.gz') | first }}"
    protobuf_dirname: "protobuf-{{ protobuf_version }}"

  tasks:
    - name: Install build dependences
      become: true
      package:
        name:
          - build-essential
          - autoconf
          - autogen
          - bison
          - dejagnu
          - flex
          - flip
          - gawk
          - git
          - gperf
          - gzip
          - nsis
          - openssh-client
          - p7zip-full
          - perl
          - python-dev
          - libisl-dev
          - scons
          - tcl
          - texinfo
          - tofrodos
          - wget
          - zip
          - texlive
          - texlive-extra-utils
          - libncurses5-dev
          - libncursesw6
          - libncurses-dev
          - libtool
        state: latest

    - name: Create work dirs
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ unpack_dir }}"
        - "{{ out_dir }}"

    - name: Download Python sources
      get_url:
        url: "{{ python_link }}"
        dest: "{{ work_dir }}/{{ python_filename }}"

    - name: Unpack python sources
      unarchive:
        src: "{{ work_dir }}/{{ python_filename }}"
        dest: "{{ unpack_dir }}"

    - name: Build python (x86_64-linux)
      shell: |
        ./configure --prefix="{{ work_dir }}/python"
        make "-j{{ ansible_processor_vcpus }}"
        make install
      args:
        chdir: "{{ unpack_dir }}/{{ python_dirname }}"

    - name: Install python libs
      shell: |
        ./python3 -m pip install protobuf=="{{ protobuf_version }}"
      args:
        chdir: "{{ work_dir }}/python/bin"

    - name: Download ncurses sources
      get_url:
        url: "{{ ncurses_link }}"
        dest: "{{ work_dir }}/{{ ncurses_filename }}"

    - name: Unpack ncurses sources
      unarchive:
        src: "{{ work_dir }}/{{ ncurses_filename }}"
        dest: "{{ unpack_dir }}"

    - name: Build ncurses (x86_64-linux)
      shell: |
        ./configure --with-shared --enable-widec --with-versioned-syms --prefix="{{ work_dir }}/ncurses"
        make "-j{{ ansible_processor_vcpus }}"
        make install
      args:
        chdir: "{{ unpack_dir }}/{{ ncurses_dirname }}"

    - name: Download protobuf sources
      get_url:
        url: "{{ protobuf_link }}"
        dest: "{{ work_dir }}/{{ protobuf_filename }}"

    - name: Unpack protobuf sources
      unarchive:
        src: "{{ work_dir }}/{{ protobuf_filename }}"
        dest: "{{ unpack_dir }}"

    - name: Build protobuf (x86_64-linux)
      shell: |
        ./configure --prefix="{{ work_dir }}/protobuf"
        make "-j{{ ansible_processor_vcpus }}"
        make install
      args:
        chdir: "{{ unpack_dir }}/{{ protobuf_dirname }}"

    - name: Download toolchain sources
      get_url:
        url: "{{ src_link }}"
        dest: "{{ work_dir }}/{{ src_filename }}"

    # we use shell command cause Ansible's unarchive module don't support *.bz2 format
    - name: Unpack toolchain sources
      shell:
        cmd: "tar -xjf {{ work_dir }}/{{ src_filename }} -C {{ work_dir }}"
        warn: false

    - name: Patch build-toolchain.sh
      replace:
        path: "{{ work_dir }}/{{ src_dirname }}/build-toolchain.sh"
        regexp: "--with-python=yes"
        replace: "--with-python={{ work_dir }}/python/bin/python3"

    # to compile gdb with custom Python, it need to be in PATH for compilation time
    - name: Build toolchain (x86_64-linux)
      shell: |
        export PATH="{{ work_dir }}/python/bin:$PATH"
        ./install-sources.sh --skip_steps=mingw32
        ./build-prerequisites.sh --skip_steps=mingw32
        ./build-toolchain.sh --skip_steps=mingw32
      become: true
      args:
        chdir: "{{ work_dir }}/{{ src_dirname }}"

    - name: Find builded archive to patch (x86_64-linux)
      find:
        paths: "{{ work_dir }}/{{ src_dirname }}/pkg"
        use_regex: true
        patterns: '.+x86_64-linux\.tar\.bz2$'
        file_type: "file"
      register: x86_64_linux_toolchain_tar

    - set_fact:
        x86_64_linux_toolchain_tar: "{{ x86_64_linux_toolchain_tar.files[0].path}}"

    - name: Unpack builded archive (x86_64-linux)
      shell:
        cmd: "tar -xjf {{ x86_64_linux_toolchain_tar }} -C {{ unpack_dir }}"
        warn: false

    # we can use variable output only on next task..
    - set_fact:
        x86_64_linux_toolchain_dir: "{{ x86_64_linux_toolchain_tar | basename }}"

    - set_fact:
        x86_64_linux_toolchain_dir: "{{ unpack_dir }}/{{ x86_64_linux_toolchain_dir.split('-x86_64-linux') | first }}"

    - name: Copy our Python to toolchain (x86_64-linux)
      copy:
        src: "{{ work_dir }}/python"
        dest: "{{ x86_64_linux_toolchain_dir }}"

    - name: Copy our ncurses to toolchain (x86_64-linux)
      copy:
        src: "{{ work_dir }}/ncurses"
        dest: "{{ x86_64_linux_toolchain_dir }}"

    - name: Rename original arm-none-eabi-gdb-py to arm-none-eabi-gdb-py-bin (x86_64-linux)
      copy:
        src: "{{ x86_64_linux_toolchain_dir }}/bin/arm-none-eabi-gdb-py"
        dest: "{{ x86_64_linux_toolchain_dir }}/bin/arm-none-eabi-gdb-py-bin"
        mode: "0755"

    - name: Rename original arm-none-eabi-gdb to arm-none-eabi-gdb-bin (x86_64-linux)
      copy:
        src: "{{ x86_64_linux_toolchain_dir }}/bin/arm-none-eabi-gdb"
        dest: "{{ x86_64_linux_toolchain_dir }}/bin/arm-none-eabi-gdb-bin"
        mode: "0755"

    - name: Rename original protoc to protoc-bin (x86_64-linux)
      copy:
        src: "{{ x86_64_linux_toolchain_dir }}/protobuf/bin/protoc"
        dest: "{{ x86_64_linux_toolchain_dir }}/protobuf/bin/protoc-bin"
        mode: "0755"

    - name: Add arm-none-eabi-gdb-py wrapper (x86_64-linux)
      copy:
        src: "{{ work_dir }}/arm-none-eabi-gdb-py-wrapper"
        dest: "{{ x86_64_linux_toolchain_dir }}/bin/arm-none-eabi-gdb-py"
        mode: "0755"

    - name: Add arm-none-eabi-gdb wrapper (x86_64-linux)
      copy:
        src: "{{ work_dir }}/arm-none-eabi-gdb-wrapper"
        dest: "{{ x86_64_linux_toolchain_dir }}/bin/arm-none-eabi-gdb"
        mode: "0755"

    - name: Add protoc wrapper (x86_64-linux)
      copy:
        src: "{{ work_dir }}/protoc-wrapper"
        dest: "{{ x86_64_linux_toolchain_dir }}/protobuf/bin/protoc"
        mode: "0755"

    - name: Pack patched toolchain (x86_64-linux)
      archive:
        path: "{{ x86_64_linux_toolchain_dir }}"
        dest: "{{ out_dir }}/{{ x86_64_linux_toolchain_tar | basename | regex_replace('.tar.bz2', '.tgz') }}"
