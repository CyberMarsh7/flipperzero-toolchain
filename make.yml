#!/usr/bin/ansible-playbook

---
- hosts: 127.0.0.1
  connection: local
  vars:
    src_link: "https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-src.tar.bz2"
    python_link: "https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz"
    work_dir: "{{ playbook_dir }}/src"
    unpack_dir: "{{ work_dir }}/unpack"
    out_dir: "{{ playbook_dir }}/build"
    src_filename: "{{ src_link | basename }}"
    src_dirname: "{{ src_filename.split('-src') | first }}"
    python_filename: "{{ python_link | basename }}"
    python_dirname: "{{ python_filename.split('.tgz') | first }}"
  tasks:
    - name: Install build dependences
      become: true
      package:
        name:
          - build-essential
          - autoconf
          - autogen
          - bison
          - dejagnu
          - flex
          - flip
          - gawk
          - git
          - gperf
          - gzip
          - nsis
          - openssh-client
          - p7zip-full
          - perl
          - python-dev
          - libisl-dev
          - scons
          - tcl
          - texinfo
          - tofrodos
          - wget
          - zip
          - texlive
          - texlive-extra-utils
          - libncurses5-dev
        state: latest

    - name: Create work dirs
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ unpack_dir }}"
        - "{{ out_dir }}"

    - name: Download toolchain sources
      get_url:
        url: "{{ src_link }}"
        dest: "{{ work_dir }}/{{ src_filename }}"

    # we use shell command cause Ansible's unarchive module don't support *.bz2 format
    - name: Unpack toolchain sources
      shell:
        cmd: "tar -xjf {{ work_dir }}/{{ src_filename }} -C {{ work_dir }}"
        warn: false

    - name: Build toolchain (x86_64-linux)
      shell: |
        ./install-sources.sh --skip_steps=mingw32
        ./build-prerequisites.sh --skip_steps=mingw32
        ./build-toolchain.sh --skip_steps=mingw32
      become: true
      args:
        chdir: "{{ work_dir }}/{{ src_dirname }}"

    - name: Find builded archive to patch (x86_64-linux)
      find:
        paths: "{{ work_dir }}/{{ src_dirname }}/pkg"
        use_regex: true
        patterns: '.+x86_64-linux\.tar\.bz2$'
        file_type: "file"
      register: x86_64_linux_toolchain_tar

    - set_fact:
        x86_64_linux_toolchain_tar: "{{ x86_64_linux_toolchain_tar.files[0].path}}"

    - name: Unpack builded archive (x86_64-linux)
      shell:
        cmd: "tar -xjf {{ x86_64_linux_toolchain_tar }} -C {{ unpack_dir }}"
        warn: false

    # to make it define in single line we need Ansible version >=2.11
    - set_fact:
        x86_64_linux_toolchain_dir: "{{ unpack_dir }}/{{ x86_64_linux_toolchain_tar | basename | split('-x86_64-linux') | first }}"

    - name: Download Python sources
      get_url:
        url: "{{ python_link }}"
        dest: "{{ work_dir }}/{{ python_filename }}"

    - name: Unpack python sources
      unarchive:
        src: "{{ work_dir }}/{{ python_filename }}"
        dest: "{{ unpack_dir }}"

    - name: Build python (x86_64-linux)
      shell: |
        ./configure --prefix="{{ x86_64_linux_toolchain_dir }}/python" --with-threads --enable-shared --enable-unicode=ucs4
        make -s "-j{{ ansible_processor_vcpus }}"
        make install
      become: true
      args:
        chdir: "{{ unpack_dir }}/{{ python_dirname }}"

    - name: Rename original arm-none-eabi-gdb-py to arm-none-eabi-gdb-py-bin (x86_64-linux)
      copy:
        src: "{{ x86_64_linux_toolchain_dir }}/bin/arm-none-eabi-gdb-py"
        dest: "{{ x86_64_linux_toolchain_dir }}/bin/arm-none-eabi-gdb-py-bin"
        mode: "0755"

    - name: Add arm-none-eabi-gdb-py wrapper (x86_64-linux)
      copy:
        src: "{{ work_dir }}/arm-none-eabi-gdb-py-wrapper"
        dest: "{{ x86_64_linux_toolchain_dir }}/bin/arm-none-eabi-gdb-py"
        mode: "0755"

    - name: Pack patched toolchain (x86_64-linux)
      archive:
        path: "{{ x86_64_linux_toolchain_dir }}"
        dest: "{{ out_dir }}/{{ x86_64_linux_toolchain_tar | basename | regex_replace('.tar.bz2', '.tgz') }}"
